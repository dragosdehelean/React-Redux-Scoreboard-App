{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Player.js","components/AddPlayerForm.js","actiontypes/player.js","actions/player.js","components/App.js","serviceWorker.js","reducers/player.js","index.js"],"names":["Stats","props","playerCount","players","length","totalPoints","reduce","total","player","score","react_default","a","createElement","className","Stopwatch","state","running","previouseTime","elapsedTime","componentDidMount","_this","interval","setInterval","onTick","componentWillUnmount","clearInterval","onStart","setState","previousTime","Date","now","onStop","onReset","seconds","Math","floor","this","onClick","Component","Header","components_Stats","components_Stopwatch","Counter","updatePlayerScore","index","Player","removePlayer","name","components_Counter","AddPlayerForm","onNameChange","e","target","value","onSubmit","preventDefault","addPlayer","type","onChange","placeholder","ADD_PLAYER","REMOVE_PLAYER","UPDATE_PLAYER_SCORE","PlayerActionTypes","direction","App","_this$props","dispatch","bindActionCreators","PlayerActionCreators","playerComponents","map","components_Player","key","components_Header","components_AddPlayerForm","connect","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","concat","Object","toConsumableArray","slice","objectSpread","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f54ed5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Stats = (props) => {\r\n    \r\n    const playerCount = props.players.length;\r\n    const totalPoints = props.players.reduce(function (total, player) {\r\n        return total + player.score;\r\n    }, 0);\r\n\r\n    return (\r\n        <table className=\"stats\">\r\n            <tbody>\r\n                <tr>\r\n                    <td>Players:</td>\r\n                    <td>{playerCount}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Total Points:</td>\r\n                    <td>{totalPoints}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n//   Stats.propTypes = {\r\n//     players: React.PropTypes.array.isRequired,\r\n//   };\r\n\r\nexport default Stats;","import React, { Component } from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n    state = {\r\n        running: false,\r\n        previouseTime: 0,\r\n        elapsedTime: 0,\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.interval = setInterval(this.onTick);\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n\r\n    onStart = () => {\r\n        this.setState({\r\n            running: true,\r\n            previousTime: Date.now(),\r\n        });\r\n    }\r\n\r\n    onStop = () => {\r\n        this.setState({\r\n            running: false,\r\n        });\r\n    }\r\n\r\n    onReset = () => {\r\n        this.setState({\r\n            elapsedTime: 0,\r\n            previousTime: Date.now(),\r\n        });\r\n    }\r\n\r\n    onTick = () => {\r\n        if (this.state.running) {\r\n            var now = Date.now();\r\n            this.setState({\r\n                elapsedTime: this.state.elapsedTime + (now - this.state.previousTime),\r\n                previousTime: Date.now(),\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var seconds = Math.floor(this.state.elapsedTime / 1000);\r\n        return (\r\n            <div className=\"stopwatch\" >\r\n                <h2>Stopwatch</h2>\r\n                <div className=\"stopwatch-time\"> {seconds} </div>\r\n                {this.state.running ?\r\n                    <button onClick={this.onStop}>Stop</button>\r\n                    :\r\n                    <button onClick={this.onStart}>Start</button>\r\n                }\r\n                <button onClick={this.onReset}>Reset</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react';\r\nimport Stats from './Stats';\r\nimport Stopwatch from './Stopwatch';\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n      <div className=\"header\">\r\n        <Stats players={props.players} />\r\n        <h1>Scoreboard</h1>\r\n        <Stopwatch />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n//   Header.propTypes = {\r\n//     players: React.PropTypes.array.isRequired,\r\n//   };\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n      <div className=\"counter\" >\r\n        <button className=\"counter-action decrement\" onClick={() => props.updatePlayerScore(props.index, -1)}>\r\n          -\r\n       </button>\r\n        <div className=\"counter-score\"> {props.score} </div>\r\n        <button className=\"counter-action increment\" onClick={() => props.updatePlayerScore(props.index, 1)}>\r\n          +\r\n       </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n//   Counter.propTypes = {\r\n//     onChange: React.PropTypes.func.isRequired,\r\n//     score: React.PropTypes.number.isRequired,\r\n//   };\r\n\r\nexport default Counter;","import React from 'react';\r\nimport Counter from './Counter';\r\n\r\nconst Player = (props) => {\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"player-name\">\r\n        <a className=\"remove-player\" onClick={() => props.removePlayer(props.index)}>âœ–</a>\r\n        {props.name}\r\n      </div>\r\n      <div className=\"player-score\">\r\n        <Counter index={props.index}\r\n          updatePlayerScore={props.updatePlayerScore}\r\n          score={props.score} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//   Player.propTypes = {\r\n//     name: React.PropTypes.string.isRequired,\r\n//     score: React.PropTypes.number.isRequired,\r\n//     onRemove: React.PropTypes.func.isRequired,\r\n//     onScoreChange: React.PropTypes.func.isRequired,\r\n//   };\r\n\r\nexport default Player;  ","import React, { Component } from 'react';\r\n\r\nclass AddPlayerForm extends Component {\r\n\r\n    state = { name: '' }\r\n\r\n    onNameChange = (e) => {\r\n        const name = e.target.value;\r\n        this.setState({ name: name });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        if (e) e.preventDefault();\r\n        this.props.addPlayer(this.state.name);\r\n        this.setState({ name: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-player-form\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        onChange={this.onNameChange}\r\n                        placeholder=\"Player Name\"\r\n                    />\r\n                    <input type=\"submit\" value=\"Add Player\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//   propTypes: {\r\n//     onAdd: React.PropTypes.func.isRequired,\r\n//   }\r\n\r\nexport default AddPlayerForm;","export const ADD_PLAYER = '/player/ADD_PLAYER';\r\nexport const REMOVE_PLAYER = '/player/REMOVE_PLAYER';\r\nexport const UPDATE_PLAYER_SCORE = '/player/UPDATE_PLAYER_SCORE';","import * as PlayerActionTypes from \"../actiontypes/player\";\r\n\r\nexport const addPlayer = name => {\r\n    return {\r\n        type: PlayerActionTypes.ADD_PLAYER,\r\n        name\r\n    }\r\n}\r\n\r\nexport const removePlayer = index => {\r\n    return {\r\n        type: PlayerActionTypes.REMOVE_PLAYER,\r\n        index\r\n    }\r\n}\r\n\r\nexport const updatePlayerScore = (index, direction) => {\r\n    return {\r\n        type: PlayerActionTypes.UPDATE_PLAYER_SCORE,\r\n        index,\r\n        direction\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Player from './Player';\r\nimport AddPlayerForm from './AddPlayerForm';\r\nimport { connect } from 'react-redux';\r\nimport * as PlayerActionCreators from '../actions/player';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    const { dispatch, players } = this.props;\r\n\r\n    const addPlayer = bindActionCreators(PlayerActionCreators.addPlayer, dispatch);\r\n    const removePlayer = bindActionCreators(PlayerActionCreators.removePlayer, dispatch);\r\n    const updatePlayerScore = bindActionCreators(PlayerActionCreators.updatePlayerScore, dispatch);\r\n\r\n    const playerComponents = players.map((player, index) => (\r\n      <Player \r\n        key={player.name}\r\n        index={index} \r\n        name={player.name}\r\n        score={player.score}\r\n        updatePlayerScore={updatePlayerScore}\r\n        removePlayer={removePlayer}\r\n      />\r\n    ))\r\n\r\n    return (\r\n      <div className=\"scoreboard\">\r\n        <Header players={players} />\r\n        <div className=\"players\">\r\n          {playerComponents}\r\n        </div>\r\n        <AddPlayerForm addPlayer={addPlayer} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n  { players: state }\r\n)\r\n\r\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as PlayerActionTypes from \"../actiontypes/player\";\r\n\r\nconst initialState = [\r\n  {\r\n    name: \"Mihai\",\r\n    score: 31\r\n  },\r\n  {\r\n    name: \"Alina\",\r\n    score: 20\r\n  },\r\n  {\r\n    name: \"Carmen\",\r\n    score: 50\r\n  }\r\n];\r\n\r\nexport default function PlayerReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case PlayerActionTypes.ADD_PLAYER:\r\n      return [...state, { name: action.name, score: 0 }];\r\n    case PlayerActionTypes.REMOVE_PLAYER:\r\n      return [...state.slice(0, action.index), ...state.slice(action.index + 1)];\r\n    case PlayerActionTypes.UPDATE_PLAYER_SCORE:\r\n      return state.map((player, index) => {\r\n        return index === action.index ? { ...player, score: player.score + action.direction } : player;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport PlayerReducer from './reducers/player';\n\nconst store = createStore(PlayerReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}